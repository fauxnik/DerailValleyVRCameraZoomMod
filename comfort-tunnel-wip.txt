

		//[HarmonyPatch(typeof(ComfortTunnelOverlay), "Update")]
		//class ComfortTunnelOverlay_Update_Patch
  //      {
		//	static bool Prefix(
		//		ComfortTunnelOverlay __instance,
		//		Transform ___playarea,
		//		Vector3 ___lastPosition,
		//		Vector3 ___lastForward,
		//		ref bool ___lostParent,
		//		float ___maximumEffectCoverage,
		//		ref float ___angularVelocity,
		//		ref float ___angularVelocitySlew,
		//		Func<Color, float, float, void> ___SetShaderFeather)
  //          {
  //              try
  //              {
		//			if (thisModEntry.Active)
  //                  {
		//				if (___playarea.parent)
		//				{
		//					Vector3 forward = ___playarea.forward;
		//					Vector3 localPosition = ___playarea.parent.localPosition;
		//					if (___lostParent)
		//					{
		//						___lastPosition = localPosition;
		//					}
		//					float num = Vector3.Angle(___lastForward, forward) / Time.deltaTime;
		//					num = (num - __instance.minimumRotation) / (__instance.maximumRotation - __instance.minimumRotation);
		//					if (__instance.maximumSpeed > 0f)
		//					{
		//						float num2 = (localPosition - ___lastPosition).magnitude / Time.deltaTime;
		//						num2 = (num2 - __instance.minimumSpeed) / (__instance.maximumSpeed - __instance.minimumSpeed);
		//						if (num2 > num)
		//						{
		//							num = num2;
		//						}
		//					}
		//					float num3 = __instance.initialEffectSize * ___maximumEffectCoverage;
		//					float num4 = __instance.maximumEffectSize * ___maximumEffectCoverage - num3;
		//					num = Mathf.Clamp01(num) * num4;
		//					___angularVelocity = Mathf.SmoothDamp(___angularVelocity, num, ref ___angularVelocitySlew, __instance.smoothingTime);
		//					__instance.SetShaderFeather(__instance.effectColor, ___angularVelocity + num3, __instance.featherSize);
		//					this.lastForward = forward;
		//					this.lastPosition = localPosition;
		//					if (this.effectSkybox != null)
		//					{
		//						this.matCameraEffect.SetMatrixArray("_EyeToWorld", new Matrix4x4[]
		//						{
		//			this.headsetCamera.GetStereoViewMatrix(Camera.StereoscopicEye.Left).inverse,
		//			this.headsetCamera.GetStereoViewMatrix(Camera.StereoscopicEye.Right).inverse
		//						});
		//						Matrix4x4[] array = new Matrix4x4[]
		//						{
		//			this.headsetCamera.GetStereoProjectionMatrix(Camera.StereoscopicEye.Left),
		//			this.headsetCamera.GetStereoProjectionMatrix(Camera.StereoscopicEye.Right)
		//						};
		//						array[0] = GL.GetGPUProjectionMatrix(array[0], true).inverse;
		//						array[1] = GL.GetGPUProjectionMatrix(array[1], true).inverse;
		//						ref Matrix4x4 ptr = ref array[0];
		//						ptr[1, 1] = ptr[1, 1] * -1f;
		//						ptr = ref array[1];
		//						ptr[1, 1] = ptr[1, 1] * -1f;
		//						this.matCameraEffect.SetMatrixArray("_EyeProjection", array);
		//					}
		//					this.matCameraEffect.SetFloat(this.shaderPropertyFarPlaneMultiplier, this.farPlaneMulti);
		//					this.matCameraEffect.SetFloat(this.shaderPropertyRadiusMultiplier, this.radiusMultiplier);
		//					this.lostParent = false;
		//					return;
		//				}
		//				___lostParent = true;
		//			}
  //              }
		//		catch (Exception e)
  //              {
		//			Debug.LogError(string.Format("Exception thrown during ComfortTunnelOverlay.Update prefix patch:\n{0}", e.Message));
		//			OnCriticalFailure();
  //              }
		//		return true;
  //          }
        //}